
import java.lang.Math.pow
import java.math.BigInteger
import java.util.LinkedList
import java.util.PriorityQueue
import java.util.Queue
import java.util.Stack
import kotlin.math.*

fun main() {
    val solution = Solution()

    solution.solution()
}




class Solution {

    data class Node(
        val n: Int,
        val weight: Int
    ) : Comparable<Node> {
        override fun compareTo(other: Node): Int {
            return weight - other.weight
        }
    }

    fun solution() {
                /*
        6 7 4
        1 2 1
        1 3 1
        2 3 10
        3 4 1
        3 5 2
        4 5 1
        5 6 1
         */
        val (V, E, P) = readLine()!!.split(' ').map { it.toInt() }
        val graph = Array<ArrayList<Node>>(V+1) { arrayListOf() }

        repeat(E) {
            val (a, b, c) = readLine()!!.split(' ').map { it.toInt() }
            graph[a].add(Node(b, c))
            graph[b].add(Node(a, c))
        }
        /*
       1. 다익스트라 알고리즘을 사용
       2. 최단거리 계산
       3. 건우까지 최단거리 계산
       4. 건우에서 마산까지 최단거리 계산
       5. 최단거리가 건우까지의 최단거리 + 건우, 마산의 최단거리랑 같다면 구출
        */
        val can = dijkstra(1, V, V, graph)
        val save = dijkstra(1, V, P, graph)
        val him = dijkstra(P, V, V, graph)

        if (can == save + him) {
            println("SAVE HIM")
        } else
            println("GOOD BYE")
    }

    fun dijkstra(start: Int, V: Int, goal: Int, graph: Array<ArrayList<Node>>): Int {
        val queue = PriorityQueue<Node>()
        val dist = IntArray(V+1) { Int.MAX_VALUE }
        val visited = BooleanArray(V+1) { false }

        dist[start] = 0
        queue.offer(Node(start, 0))

        while (queue.isNotEmpty()) {
            val now = queue.poll()

            if (visited[now.n]) continue
            visited[now.n] = true

            for (next in graph[now.n]) {
                    if (dist[next.n] > dist[now.n] + next.weight) {
                        dist[next.n] = dist[now.n] + next.weight
                        queue.offer(Node(next.n, dist[next.n]))
                    }
            }
        }

        return dist[goal]
    }
}
